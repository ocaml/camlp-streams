; camlp-streams is built in three different ways, depending on the version of
; OCaml it's built for:
; - 4.13 and earlier: empty library; Standard Library Stream and Genlex used
;   directly, since it's not possible in these versions to override the modules
; - 4.14: Standard Library Stream and Genlex re-exported without deprecation
; - 5.0+: modules in src/ are compiled
; Note that on OCaml 4.10 and earlier for MSVC and 4.04 and earlier for macOS, a
; dummy module CamlinternalCamlp_streams is added to workaround the inability to
; create empty .cmxa files on both those platforms.

; Use the files in src/ for OCaml 5.0+
(rule
  (target stream.mli)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target stream.ml)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target genlex.mli)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target genlex.ml)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target flags.sexp)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

; Re-export Stream and Genlex directly in OCaml 4.14 to remove the deprecation
; warning
(rule
  (target stream.mli)
  (action (with-stdout-to %{target}
    (echo "include module type of struct include Stream end")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target stream.ml)
  (action (with-stdout-to %{target}
    (echo "include Stream")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target genlex.mli)
  (action (with-stdout-to %{target}
    (echo "include module type of struct include Genlex end")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target genlex.ml)
  (action (with-stdout-to %{target}
    (echo "include Genlex")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (action (with-stdout-to flags.sexp (echo "(-alert -deprecated)")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

; Do nothing for OCaml 4.13 and earlier - Dune will then create an empty library
; OCaml 4.04 on macOS and OCaml 4.10 and earlier with the Microsoft C compiler
; on Windows cannot create empty .cmxa files. On these specific systems and
; versions, the empty module CamlinternalCamlp_streams is created. This name
; doesn't conflict with the official compiler release and modules prefixed
; Camlinternal are not supposed to be created outside the compiler distribution.

(rule
  (target camlinternalCamlp_streams.ml)
  (action (with-stdout-to %{target} (echo "")))
  (enabled_if (or (and (< %{ocaml_version} 4.11) (= %{ocaml-config:ccomp_type} msvc))
                  (and (< %{ocaml_version} 4.05) (= %{system} macosx)))))

(rule
  (action (with-stdout-to flags.sexp (echo "()")))
  (enabled_if (< %{ocaml_version} 4.14)))

(library
  (name camlp_streams)
  (public_name camlp-streams)
  (wrapped false)
  (flags :standard (:include flags.sexp)))
